1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]

temp = my_list[6]
my_list[6] = my_list[7]
my_list[7] = temp

print(my_list)

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]

temp = my_list[0]
my_list[0] = my_list[3]
my_list[3] = temp

print(my_list)

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

This code switches the value in the 1 position, 32, with the value in the 0 position, 70, successfully, but it does not
switch the list position 0 from 70 to 32. The printed out list with this code would be [70, 70, 98, 88, 92, 36, 81, 83, 87, 66],
which does not successfully switch the values.

4. Show how the following numbers can be sorted using the selection sort. Show the numbers after each iteration of the outer loop, similar to what is shown in the book. I am NOT looking for a copy of the code to do the sort. If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60
0   74    8   98   47   62   12   11    97   60
0   8    74   98   47   62   12   11    97   60
0   8    11   98   47   62   12   74    97   60
0   8    11   12   47   62   98   74    97   60
0   8    11   12   47   60   98   74    97   62
0   8    11   12   47   60   62   74    97   98

5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
0   92   18   47   40   58    74   36   29   25
0   18   92   47   40   58    74   36   29   25
0   18   25   47   40   58    74   36   29   92
0   18   25   29   40   58    74   36   47   92
0   18   25   29   36   58    74   40   47   92
0   18   25   29   36   40    74   58   47   92
0   18   25   29   36   40    47   58   74   92

6. Show how the following numbers can be sorted using the INSERTION sort. (Note: If you think the 0 gets immediately sorted into position, you are doing it wrong. Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
74   92   18   47   40   58    0   36   29   25
18   74   92   47   40   58    0   36   29   25
18   47   74   92   40   58    0   36   29   25
18   40   47   74   92   58    0   36   29   25
18   40   47   58   74   92    0   36   29   25
0    18   40   47   58   74   92   36   29   25
0    18   36   40   47   58   74   92   29   25
0    18   29   36   40   47   58   74   92   25
0    18   25   29   36   40   47   58   74   92

7. Show how the following numbers can be sorted using the insertion sort:

    37   11   14   50   24    7   17   88   99    9
    11   37   14   50   24    7   17   88   99    9
    11   14   37   50   24    7   17   88   99    9
    11   14   37   50   24    7   17   88   99    9
    11   14   24   37   50    7   17   88   99    9
    7    11   14   24   37   50   17   88   99    9
    7    11   14   17   24   37   50   88   99    9
    7    11   14   17   24   37   50   88   99    9
    7    11   14   17   24   37   50   88   99    9
    7    9    11   14   17   24   37   50   88   99

8. Explain what `min_pos` does in the selection sort.
'min_pos'  in the selection sort holds the smallest element of the list each time the list is looped through

9. Explain what `cur_pos` does in the selection sort.
'cur_pos' in the selection sort represents the position during the scan that the program is looking to swap the smallest element into

10. Explain what `scan_pos` does in the selection sort.
'scan_pos' in the selection sort is where the list is being scanned looking to find the smallest element

11. Explain what `key_pos` and `key_value` are in the insertion sort.
'key_pos' in the insertion sort is the position of the new element we are looking to insert into the list
'key_value' in the insertion sort is the value of the element found in 'key_pos'

12. Explain `scan_pos` in the insertion sort.
'scan_pos' in the insertion sort holds where we scan to the right, up until the program reaches a value that is less\
than the key_value

13. Look at the example sort program here:

Code (results are below code):
import random


def selection_sort(my_list):
    """ Sort a list using the selection sort """

    # Loop through the entire array
    # Count how many times looped
    outside_loop_count = 0
    inside_loop_count = 0
    for cur_pos in range(len(my_list)):
        # Find the position that has the smallest number
        # Start with the current position
        min_pos = cur_pos
        outside_loop_count += 1

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):
            inside_loop_count += 1

            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:
                # It is, mark this position as the smallest
                min_pos = scan_pos

        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp
    print("Outside loop of selection sort count: ", outside_loop_count)
    print("Inside loop of selection sort count: ", inside_loop_count)


def insertion_sort(my_list):
    """ Sort a list using the insertion sort """
    # Count the number of times looped
    outside_loop_count = 0
    inside_loop_count = 0
    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    for key_pos in range(1, len(my_list)):

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1
        outside_loop_count += 1
        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1
            inside_loop_count += 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value

    # Print number of times looped
    print("Outside loop of insertion sort count: ", outside_loop_count)
    print("Inside loop of insertion sort count: ", inside_loop_count)


# This will point out a list
# For more information on the print formatting {:3}
# see the chapter on print formatting.
def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    # Create two lists of the same random numbers
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 100
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

        # Print the original list
    print("Original List")
    print_list(list_for_selection_sort)

    # Use the selection sort and print the result
    print()
    print("Selection Sort")
    selection_sort(list_for_selection_sort)

    # Use the insertion sort and print the result
    print()
    print("Insertion Sort")
    insertion_sort(list_for_insertion_sort)


main()

Results:
Original List
 92 90  1 73  8 65 84 83 83 87 29 37 11 89  3 73 75 48 88 72 98 10 91 38  4 13 17 73 10 67 85 70 87 72 90 39 72  7  6 69 28 80 30 37 83 68 56 20 51 38 13 70 96 10 41  4 53 84 30 86 26 95  0 71 63 91 63 23  5  9 11 75 48 67 16 10 29 21  6  3  0 70 77 55 88 45 39 74 37 36 83  1 89 62 76 74 34 87  6 88

Selection Sort
Outside loop of selection sort count:  100
Inside loop of selection sort count:  4950

Insertion Sort
Outside loop of insertion sort count:  99
Inside loop of insertion sort count:  2654